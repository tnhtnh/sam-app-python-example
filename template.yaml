AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app-python-example

  Production-grade Serverless application with AWS Lambda (Python 3.13) and Powertools

Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Runtime: python3.13
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
      LogLevel: INFO
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: HelloWorldAPI
        POWERTOOLS_METRICS_NAMESPACE: HelloWorldAPI
        POWERTOOLS_LOG_LEVEL: INFO
        POWERTOOLS_TRACER_CAPTURE_RESPONSE: true
        POWERTOOLS_TRACER_CAPTURE_ERROR: true
        POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1
        POWERTOOLS_LOGGER_LOG_EVENT: true
  Api:
    TracingEnabled: true
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      CodeUri: hello_world
      Description: Production-grade Hello World API with multiple endpoints
      Architectures:
      - x86_64
      Events:
        # Root endpoint
        RootPath:
          Type: Api
          Properties:
            Path: /
            Method: GET
        # Hello endpoint
        HelloPath:
          Type: Api
          Properties:
            Path: /hello
            Method: GET
        # Health check endpoint
        HealthCheckPath:
          Type: Api
          Properties:
            Path: /healthcheck
            Method: GET
        # Upload endpoint
        UploadPath:
          Type: Api
          Properties:
            Path: /upload
            Method: POST
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt HelloWorldDLQ.Arn
      Tags:
        LambdaPowertools: python
        Environment: production
        Service: HelloWorldAPI

  # Dead Letter Queue for failed invocations
  HelloWorldDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-HelloWorld-DLQ"
      MessageRetentionPeriod: 1209600  # 14 days
      Tags:
        - Key: Service
          Value: HelloWorldAPI

  # CloudWatch Log Group with retention
  HelloWorldLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${HelloWorldFunction}"
      RetentionInDays: 30

  # CloudWatch Alarms for monitoring
  HelloWorldErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-HelloWorld-Errors"
      AlarmDescription: "Lambda function errors"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref HelloWorldFunction
      TreatMissingData: notBreaching

  HelloWorldDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-HelloWorld-Duration"
      AlarmDescription: "Lambda function duration"
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10000  # 10 seconds
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref HelloWorldFunction
      TreatMissingData: notBreaching

  # Application monitoring
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub "ApplicationInsights-SAM-${AWS::StackName}"
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Ref ApplicationResourceGroup
      AutoConfigurationEnabled: true

Outputs:
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod environment"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: !Sub "${AWS::StackName}-HelloWorldApi"

  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-HelloWorldFunction"

  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-HelloWorldFunctionRole"

