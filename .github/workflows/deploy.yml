name: Deploy SAM Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.13'
  AWS_REGION: us-east-1

jobs:
  test:
    name: Test and Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r hello_world/requirements.txt
          pip install -r tests/requirements.txt

      - name: Code formatting check (Black)
        run: |
          black --check hello_world/ tests/

      - name: Linting (Flake8)
        run: |
          flake8 hello_world/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 hello_world/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Type checking (MyPy)
        run: |
          mypy hello_world/ --ignore-missing-imports

      - name: Security scan (Bandit)
        run: |
          bandit -r hello_world/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json

      - name: Run unit tests with coverage
        run: |
          pytest tests/unit --cov=hello_world --cov-report=xml --cov-report=html --cov-report=term

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            htmlcov/
            coverage.xml

  build:
    name: Build SAM Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Cache SAM build
        uses: actions/cache@v3
        with:
          path: .aws-sam
          key: ${{ runner.os }}-sam-${{ hashFiles('template.yaml') }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-sam-

      - name: Build SAM application
        run: |
          sam build --use-container --cached

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sam-build-artifacts
          path: .aws-sam/build/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: sam-build-artifacts
          path: .aws-sam/build/

      - name: Deploy to staging
        run: |
          sam deploy \
            --config-env staging \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --parameter-overrides Environment=staging

      - name: Run smoke tests
        run: |
          # Add smoke tests here
          echo "Running smoke tests against staging environment"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: sam-build-artifacts
          path: .aws-sam/build/

      - name: Deploy to production
        run: |
          sam deploy \
            --config-env production \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --parameter-overrides Environment=production

      - name: Run smoke tests
        run: |
          # Add smoke tests here
          echo "Running smoke tests against production environment"

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Production deployment successful!"
          # Add notification logic (Slack, email, etc.)

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Production deployment failed!"
          # Add failure notification logic 